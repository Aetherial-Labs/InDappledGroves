<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InDappledGroves</name>
    </assembly>
    <members>
        <member name="M:InDappledGroves.BlockBehaviors.BehaviorSubmergible.DoPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.EnumHandling@)">
            <summary>Step 3: Place the block. Return false if it cannot be placed (but you should rather return false in CanPlaceBlock).</summary>
            <param name="world">The World being accessed</param>
            <param name="byPlayer">The Player Placing The Block</param>
            <param name="blockSel">The Selected Block</param>
            <param name="byItemStack">The Itemstack Held By The Player</param>
            <param name="handling">How to handle the process/if it's been handled</param>
            <returns>Whether to allow placing the block</returns>
        </member>
        <member name="M:InDappledGroves.BlockEntities.IDGBEChoppingBlock.ProcessTransform(Vintagestory.API.Common.ModelTransform,System.String)">
            <summary>
            Processes the transform.
            </summary>
            <param name="transform">The transform.</param>
            <param name="side">The side.</param>
            <returns></returns>
        </member>
        <member name="M:InDappledGroves.Blocks.IDGSawHorse.IsNotDiagonal(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>Determines whether [is not diagonal] [the specified position].</summary>
            <param name="pos">The position of the placed sawhorse block</param>
            <param name="neibpos">The position of a neighboring sawhorse block</param>
            <returns> <c>true</c> if [is not diagonal] [the specified position]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:InDappledGroves.Blocks.IDGSawHorse.getFacing(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,System.String)">
            <summary>Determines what the appropriate placing is based on the location of the first and second blocks that make up a sawhorse station relative to each other.</summary>
            <param name="pos">The position of the first block in a sawhorse station</param>
            <param name="neibpos">The position of the second block in a sawhorse station</param>
            <param name="which">A string indicating which of the two blocks that make up a sawhorse station are being checked.</param>
        </member>
        <member name="M:InDappledGroves.Items.IDGBark.OnHeldInteractStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>Called when the player right clicks while holding this block/item in his hands</summary>
            <param name="slot">Players activehotbar slot</param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="firstEvent">
            True when the player pressed the right mouse button on this block. Every subsequent call, while the player holds right mouse down will be false, it gets called every second while right mouse is down
            </param>
            <param name="handling">Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server.</param>
        </member>
        <member name="M:InDappledGroves.Items.IDGBark.MatchSlots(Vintagestory.API.Common.InventoryBase,Vintagestory.API.Common.ItemSlot)">
            <summary>Matches the slots.</summary>
            <param name="inv">The inventory of the target GroundStorage</param>
            <param name="slot">The players activehotbarslot</param>
            <returns>Returns true if all four groundstorage slots contain the same bark as the player is holding.</returns>
        </member>
        <member name="T:InDappledGroves.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InDappledGroves.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InDappledGroves.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:InDappledGroves.Util.IDGRecipeNames.IDGRecipeLoader.GroundIngredient.ToBytes(System.IO.BinaryWriter)">
            <summary>Converts to bytes.</summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:InDappledGroves.WorldGen.TreeHollows.OnWorldGenBlockAccessor(Vintagestory.API.Server.IChunkProviderThread)">
            <summary>
            Stores the chunk gen thread's IBlockAccessor for use when generating tree hollows during chunk gen. This callback
            is necessary because chunk loading happens in a separate thread and it's important to use this block accessor
            when placing tree hollows during chunk gen.
            </summary>
        </member>
        <member name="M:InDappledGroves.WorldGen.TreeHollows.OnChunkColumnGeneration(Vintagestory.API.Server.IServerChunk[],System.Int32,System.Int32,Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when a number of chunks have been generated. For each chunk we first determine if we should place a tree hollow
            and if we should we then loop through each block to find a tree. When one is found we place the block.
            </summary>
        </member>
    </members>
</doc>
